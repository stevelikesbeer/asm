; ml xx.asm -link /subsystem:console
.386
.model flat,stdcall
.stack 4096

IncludeLib  C:\Irvine\Kernel32.lib
IncludeLib  C:\Irvine\User32.lib
IncludeLib  C:\Irvine\Irvine32.lib

ExitProcess     PROTO, dwExitCode:DWORD

WriteInt        PROTO   ; eax
WriteString     PROTO   ; edx
WriteChar       PROTO   ; al
WriteBin        PROTO   ; eax
WriteBinB       PROTO   ; eax for binary, ebx for size (TYPE WORD for example)
WriteHex        PROTO   ; eax also
WriteHexB       PROTO   ; eax for hex, ebx for size
Crlf            PROTO
DumpRegs        PROTO

testProc        PROTO, var1:DWORD, var2:DWORD, var3:DWORD

.data

.code
main PROC
        ; The PROC directive has the following basic syntax:
        ;       label PROC [attributes] [USES reglist], parameter_list
        ; Attributes refers to any of the following:
        ;       [distance] [langtype] [visibility] [prologue]
        ;
        ;       distance            NEAR or FAR. Indicates the type of RET instruction (RET or RETF) generated by the assembler.
        ;       langtype            Specifies the calling convention (parameter passing convention) such as C, PASCAL,
        ;                           or STDCALL. Overrides the language specified in the .MODEL directive.
        ;       visibility          Indicates the procedure’s visibility to other modules. Choices are PRIVATE, PUBLIC
        ;                           (default), and EXPORT. If the visibility is EXPORT, the linker places the procedure’s name 
        ;                           in the export table for segmented executables. EXPORT also enables PUBLIC visibility.
        ;       prologue            Specifies arguments affecting generation of prologue and epilogue code. See the
        ;                           section entitled “User-Defined Prologue and Epilogue Code” in the MASM 6.1
        ;                           Programmers Guide, Chapter 7.

        Invoke      testProc, 10, 15, 20

        Invoke      ExitProcess,0
main ENDP

testProc PROC var1:DWORD,                               ; I don't think I have to specify the size here but it is probably useful
              var2,                                     ; I can also pass in by reference by var4: PTR BYTE
              var3                                      ; They can also be on a single line
                                                        ; I think using this syntax also sets up the prologue and epilogue
        mov         eax, var1
        call        WriteInt
        call        Crlf
        mov         eax, var2
        call        WriteInt
        call        Crlf
        mov         eax, var3
        call        WriteInt
        call        Crlf
        ret
testProc ENDP
END main